{"version":3,"file":"sidebar.e99e35d8.js","sources":["../../../../../buildchain/src/vue/charts/common/SmallRadialBarChart.vue?vue&type=template&lang.js","../../../../../buildchain/src/vue/charts/common/SmallRadialBarChart.vue","../../../../../buildchain/src/vue/charts/common/SmallSimpleBarChart.vue?vue&type=template&lang.js","../../../../../buildchain/src/vue/charts/common/SmallSimpleBarChart.vue","../../../../../buildchain/src/vue/common/SmallSamplePaneFooter.vue?vue&type=template&lang.js","../../../../../buildchain/src/vue/common/SmallSamplePaneFooter.vue","../../../../../buildchain/src/js/sidebar.js"],"sourcesContent":["\n<apexcharts width=\"100%\" height=\"180px\" type=\"radialBar\"\n            :options=\"chartOptions\" :series=\"series\"></apexcharts>\n","<template>\n    <apexcharts width=\"100%\" height=\"180px\" type=\"radialBar\"\n                :options=\"chartOptions\" :series=\"series\"></apexcharts>\n</template>\n\n<script>\n    import Axios from 'axios';\n    import ApexCharts from 'vue-apexcharts';\n    import TriBlendColor from '@/js/tri-color-blend.js';\n\n    // Configure the api endpoint\n    const configureApi = (url) => {\n        return {\n            baseURL: url,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        };\n    };\n    // Query our API endpoint via an XHR GET\n    const queryApi = (api, uri, params, callback) => {\n        api.get(uri, {params: params})\n            .then((result) => {\n                if (callback) {\n                    callback(result.data);\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    };\n\n    // Our component exports\n    export default {\n        components: {\n            'apexcharts': ApexCharts,\n        },\n        props: {\n            title: String,\n            start: String,\n            end: String,\n            column: String,\n            pageUrl: {\n                type: String,\n                default: '',\n            },\n            fastColor: {\n                type: String,\n                default: '#00C800',\n            },\n            averageColor: {\n                type: String,\n                default: '#FFFF00',\n            },\n            slowColor: {\n                type: String,\n                default: '#C80000',\n            },\n            maxValue: Number,\n            siteId: {\n                type: Number,\n                default: 0,\n            },\n            apiUrl: {\n                type: String,\n                default: '',\n            },\n        },\n        methods: {\n            // Load in our chart data asynchronously\n            getSeriesData: async function() {\n                const chartsAPI = Axios.create(configureApi(this.apiUrl));\n                let params = {\n                    'column': this.column,\n                    'start': this.displayStart,\n                    'end': this.displayEnd,\n                    'pageUrl': this.pageUrl,\n                    'siteId': this.siteId,\n                };\n                await queryApi(chartsAPI, '', params, (data) => {\n                    if (data.avg !== undefined) {\n                        let val = data.avg / 1000;\n                        if (val > this.displayMaxValue) {\n                            this.displayMaxValue = val;\n                        }\n                        val = (val * 100) / this.displayMaxValue;\n                        let chartColor = this.triBlend.colorFromPercentage(val);\n                        this.chartOptions = {\n                            ...this.chartOptions, ...{\n                                colors: [chartColor],\n                                plotOptions: {\n                                    radialBar: {\n                                        dataLabels: {\n                                            value: {\n                                                color: chartColor,\n                                            }\n                                        }\n                                    }\n                                },\n                            }\n                        };\n                        this.series = [val];\n                    }\n                });\n            },\n            onChangeRange(range) {\n                this.displayStart = range.start;\n                this.displayEnd = range.end;\n                this.getSeriesData();\n            },\n        },\n        created() {\n            this.getSeriesData();\n        },\n        mounted() {\n            if (this.$events !== undefined) {\n                this.$events.$on('change-range', eventData => this.onChangeRange(eventData));\n            }\n        },\n        data: function() {\n            return {\n                chartOptions: {\n                    chart: {\n                        id: 'vuechart-dashboard-radial-bar',\n                        fontFamily: 'inherit',\n                        toolbar: {\n                            show: false,\n                        },\n                    },\n                    states: {\n                        hover: {\n                            filter: {\n                                type: 'none',\n                                value: 0,\n                            }\n                        },\n                    },\n                    colors: ['#000000'],\n                    plotOptions: {\n                        radialBar: {\n                            startAngle: -135,\n                            endAngle: 135,\n                            hollow: {\n                                size: '65%',\n                            },\n                            track: {\n                                background: \"#dae1e7\",\n                                strokeWidth: '97%',\n                                margin: 5, // margin is in pixels\n                                shadow: {\n                                    enabled: true,\n                                    top: 2,\n                                    left: 0,\n                                    color: '#999',\n                                    opacity: 1,\n                                    blur: 2\n                                }\n                            },\n                            dataLabels: {\n                                name: {\n                                    show: false,\n                                    fontSize: '16px',\n                                    color: '#333',\n                                    offsetY: 100\n                                },\n                                value: {\n                                    offsetY: 6,\n                                    fontSize: '18px',\n                                    color: '#333',\n                                    style: {\n                                        cssClass: 'apexcharts-datalabel-value',\n                                    },\n                                    formatter: (val) => {\n                                        val = (val * this.displayMaxValue) / 100;\n                                        return Number(val).toFixed(2) + \"s\";\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    labels: [this.title],\n                    title: {\n                        text: this.title,\n                        offsetY: 20,\n                        align: 'center',\n                        style: {\n                            color: '#606f7b',\n                            fontSize: '15px',\n                            cssClass: 'apexcharts-title-text'\n                        }\n                    },\n                    stroke: {\n                        width: 1,\n                        lineCap: 'round'\n                    },\n                },\n                series: [0],\n                displayStart: this.start,\n                displayEnd: this.end,\n                displayMaxValue: this.maxValue,\n                triBlend: new TriBlendColor(this.fastColor, this.averageColor, this.slowColor),\n            }\n        },\n    }\n</script>\n","\n<div class=\"simple-bar-chart-wrapper px-3 py-1\">\n    <div class=\"clearafter py-1\">\n        <div class=\"simple-bar-chart-label text-sm font-bold text-gray-600\">{{ title }}</div>\n        <div class=\"simple-bar-chart-value text-sm font-bold text-gray-600\">{{ statFormatter(series[0]) }}</div>\n    </div>\n    <div class=\"py-1\">\n        <div class=\"simple-bar-chart-track rounded-full bg-gray-300\">\n            <div class=\"simple-bar-line h-1 rounded-full\" :style=\"{ width: series[0] + '%', backgroundColor: barColor }\"></div>\n        </div>\n    </div>\n</div>\n","<template>\n    <div class=\"simple-bar-chart-wrapper px-3 py-1\">\n        <div class=\"clearafter py-1\">\n            <div class=\"simple-bar-chart-label text-sm font-bold text-gray-600\">{{ title }}</div>\n            <div class=\"simple-bar-chart-value text-sm font-bold text-gray-600\">{{ statFormatter(series[0]) }}</div>\n        </div>\n        <div class=\"py-1\">\n            <div class=\"simple-bar-chart-track rounded-full bg-gray-300\">\n                <div class=\"simple-bar-line h-1 rounded-full\" :style=\"{ width: series[0] + '%', backgroundColor: barColor }\"></div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import Axios from 'axios';\n    import TriBlendColor from '@/js/tri-color-blend.js';\n\n    // Configure the api endpoint\n    const configureApi = (url) => {\n        return {\n            baseURL: url,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        };\n    };\n    // Query our API endpoint via an XHR GET\n    const queryApi = (api, uri, params, callback) => {\n        api.get(uri, {params: params})\n            .then((result) => {\n                if (callback) {\n                    callback(result.data);\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    };\n\n    // Our component exports\n    export default {\n        components: {\n        },\n        props: {\n            title: String,\n            start: String,\n            end: String,\n            column: String,\n            pageUrl: {\n                type: String,\n                default: '',\n            },\n            fastColor: {\n                type: String,\n                default: '#00C800',\n            },\n            averageColor: {\n                type: String,\n                default: '#FFFF00',\n            },\n            slowColor: {\n                type: String,\n                default: '#C80000',\n            },\n            maxValue: Number,\n            siteId: {\n                type: Number,\n                default: 0,\n            },\n            apiUrl: {\n                type: String,\n                default: '',\n            },\n        },\n        methods: {\n            // Load in our chart data asynchronously\n            getSeriesData: async function() {\n                const chartsAPI = Axios.create(configureApi(this.apiUrl));\n                let params = {\n                    'column': this.column,\n                    'start': this.displayStart,\n                    'end': this.displayEnd,\n                    'pageUrl': this.pageUrl,\n                    'siteId': this.siteId,\n                };\n                await queryApi(chartsAPI, '', params, (data) => {\n                    if (data.avg !== undefined) {\n                        let val = data.avg / 1000;\n                        if (val > this.displayMaxValue) {\n                            this.displayMaxValue = val;\n                        }\n                        val = (val * 100) / this.displayMaxValue;\n                        this.barColor = this.triBlend.colorFromPercentage(val);\n                        this.series = [val];\n                    }\n                });\n            },\n            onChangeRange (range) {\n                this.displayStart = range.start;\n                this.displayEnd = range.end;\n                this.getSeriesData();\n            },\n            statFormatter(val) {\n                val = (val * this.displayMaxValue) / 100;\n                return Number(val).toFixed(2) + \"s\";\n            }\n        },\n        created () {\n            this.getSeriesData();\n        },\n        mounted() {\n            if (this.$events !== undefined) {\n                this.$events.$on('change-range', eventData => this.onChangeRange(eventData));\n            }\n        },\n        data: function() {\n            return {\n                barColor: '#000',\n                series: [0],\n                displayStart: this.start,\n                displayEnd: this.end,\n                displayMaxValue: this.maxValue,\n                triBlend: new TriBlendColor(this.fastColor, this.averageColor, this.slowColor),\n            }\n        },\n    }\n</script>\n","\n<div class=\"field\">\n    <div v-if=\"samples >= 100\" class=\"heading\">\n        <p class=\"instructions\">Average of <strong>{{ formatNumber(samples) }}</strong> data sample<span v-if=\"samples !== 1\">s</span>.</p>\n    </div>\n    <p v-if=\"samples < 100\" class=\"warning\">Average of only <strong>{{ formatNumber(samples) }}</strong> data sample<span v-if=\"samples !== 1\">s</span>.</p>\n</div>\n","<template>\n    <div class=\"field\">\n        <div v-if=\"samples >= 100\" class=\"heading\">\n            <p class=\"instructions\">Average of <strong>{{ formatNumber(samples) }}</strong> data sample<span v-if=\"samples !== 1\">s</span>.</p>\n        </div>\n        <p v-if=\"samples < 100\" class=\"warning\">Average of only <strong>{{ formatNumber(samples) }}</strong> data sample<span v-if=\"samples !== 1\">s</span>.</p>\n    </div>\n</template>\n\n<script>\n    import Axios from 'axios';\n\n    // Configure the api endpoint\n    const configureApi = (url) => {\n        return {\n            baseURL: url,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        };\n    };\n    // Query our API endpoint via an XHR GET\n    const queryApi = (api, uri, params, callback) => {\n        api.get(uri, {params: params})\n            .then((result) => {\n                if (callback) {\n                    callback(result.data);\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    };\n\n    // Our component exports\n    export default {\n        components: {\n        },\n        props: {\n            start: String,\n            end: String,\n            column: String,\n            displayDevModeWarning: {\n                type: Boolean,\n                default: false\n            },\n            pageUrl: {\n                type: String,\n                default: '',\n            },\n            subject: {\n                type: String,\n                default: '',\n            },\n            siteId: {\n                type: Number,\n                default: 0,\n            },\n            apiUrl: {\n                type: String,\n                default: '',\n            },\n        },\n        methods: {\n            // Load in our chart data asynchronously\n            getSeriesData: async function() {\n                const chartsAPI = Axios.create(configureApi(this.apiUrl));\n                let params = {\n                    'column': this.column,\n                    'start': this.displayStart,\n                    'end': this.displayEnd,\n                    'pageUrl': this.pageUrl,\n                    'siteId': this.siteId,\n                };\n                await queryApi(chartsAPI, '', params, (data) => {\n                    if (data.cnt !== undefined) {\n                        this.samples = data.cnt;\n                    }\n                });\n            },\n            onChangeRange (range) {\n                this.displayStart = range.start;\n                this.displayEnd = range.end;\n                this.getSeriesData();\n            },\n            formatNumber(number) {\n                return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n        },\n        created () {\n            this.getSeriesData();\n        },\n        mounted() {\n            if (this.$events !== undefined) {\n                this.$events.$on('change-range', eventData => this.onChangeRange(eventData));\n            }\n        },\n        data: function() {\n            return {\n                samples: 0,\n                displayEnd: this.end,\n                displayMaxValue: this.maxValue,\n            }\n        },\n    }\n</script>\n","import SmallRadialBarChart from '@/vue/charts/common/SmallRadialBarChart.vue';\nimport SmallSimpleBarChart from '@/vue/charts/common/SmallSimpleBarChart.vue';\nimport SmallSamplePaneFooter from '@/vue/common/SmallSamplePaneFooter.vue';\n\n// Create our vue instance\nconst vm = new Vue({\n    el: \"#cp-nav-content\",\n    components: {\n        'small-radial-bar-chart': SmallRadialBarChart,\n        'small-simple-bar-chart': SmallSimpleBarChart,\n        'small-sample-pane-footer': SmallSamplePaneFooter,\n    },\n    data: {\n    },\n    mounted() {\n    },\n});\n"],"names":["render","staticRenderFns"],"mappings":"shBAAA,GAAIA,GAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAQ,OAAO,OAAS,QAAQ,KAAO,YAAY,QAAU,EAAI,aAAa,OAAS,EAAI,WAC/MC,EAAkB,GCUtB,usECXID,EAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,MAAM,CAAC,YAAY,sCAAsC,CAAC,EAAG,MAAM,CAAC,YAAY,mBAAmB,CAAC,EAAG,MAAM,CAAC,YAAY,0DAA0D,CAAC,EAAI,GAAG,EAAI,GAAG,EAAI,UAAU,EAAG,MAAM,CAAC,YAAY,0DAA0D,CAAC,EAAI,GAAG,EAAI,GAAG,EAAI,cAAc,EAAI,OAAO,UAAU,EAAG,MAAM,CAAC,YAAY,QAAQ,CAAC,EAAG,MAAM,CAAC,YAAY,mDAAmD,CAAC,EAAG,MAAM,CAAC,YAAY,mCAAmC,MAAO,CAAE,MAAO,EAAI,OAAO,GAAK,IAAK,gBAAiB,EAAI,mBAClpBC,EAAkB,GCkBtB,s7CCnBI,EAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,MAAM,CAAC,YAAY,SAAS,CAAE,EAAI,SAAW,IAAK,EAAG,MAAM,CAAC,YAAY,WAAW,CAAC,EAAG,IAAI,CAAC,YAAY,gBAAgB,CAAC,EAAI,GAAG,eAAe,EAAG,SAAS,CAAC,EAAI,GAAG,EAAI,GAAG,EAAI,aAAa,EAAI,aAAa,EAAI,GAAG,gBAAiB,EAAI,UAAY,EAAG,EAAG,OAAO,CAAC,EAAI,GAAG,OAAO,EAAI,KAAK,EAAI,GAAG,SAAS,EAAI,KAAM,EAAI,QAAU,IAAK,EAAG,IAAI,CAAC,YAAY,WAAW,CAAC,EAAI,GAAG,oBAAoB,EAAG,SAAS,CAAC,EAAI,GAAG,EAAI,GAAG,EAAI,aAAa,EAAI,aAAa,EAAI,GAAG,gBAAiB,EAAI,UAAY,EAAG,EAAG,OAAO,CAAC,EAAI,GAAG,OAAO,EAAI,KAAK,EAAI,GAAG,OAAO,EAAI,QAC5nB,EAAkB,GCYtB,2mCCRW,GAAI,KAAI,CACf,GAAI,kBACJ,WAAY,CACR,yBAA0B,EAC1B,yBAA0B,EAC1B,2BAA4B,GAEhC,KAAM,GAEN,SAAU"}