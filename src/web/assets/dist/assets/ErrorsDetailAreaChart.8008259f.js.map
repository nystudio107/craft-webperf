{"version":3,"file":"ErrorsDetailAreaChart.8008259f.js","sources":["../../../../../buildchain/src/vue/charts/Errors/ErrorsDetailAreaChart.vue?vue&type=template&lang.js","../../../../../buildchain/src/vue/charts/Errors/ErrorsDetailAreaChart.vue"],"sourcesContent":["\n<apexcharts width=\"100%\" height=\"450px\" type=\"area\" :options=\"chartOptions\" :series=\"series\"></apexcharts>\n","<template>\n    <apexcharts width=\"100%\" height=\"450px\" type=\"area\" :options=\"chartOptions\" :series=\"series\"></apexcharts>\n</template>\n\n<script>\n    import Axios from 'axios';\n    import ApexCharts from 'vue-apexcharts';\n\n    // Get the largest number from the passed in arrays\n    const largestNumber = (mainArray) => {\n        return mainArray.map(function(subArray) {\n            return Math.max.apply(null, subArray);\n        });\n    };\n\n    // Configure the api endpoint\n    const configureApi = (url) => {\n        return {\n            baseURL: url,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        };\n    };\n    // Query our API endpoint via an XHR GET\n    const queryApi = (api, uri, params, callback) => {\n        api.get(uri, {params: params})\n            .then((result) => {\n                if (callback) {\n                    callback(result.data);\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    };\n\n    // Our component exports\n    export default {\n        components: {\n            'apexcharts': ApexCharts,\n        },\n        props: {\n            title: String,\n            start: String,\n            end: String,\n            pageUrl: {\n                type: String,\n                default: '',\n            },\n            siteId: {\n                type: Number,\n                default: 0,\n            },\n            apiUrl: {\n                type: String,\n                default: '',\n            },\n        },\n        methods: {\n            // Load in our chart data asynchronously\n            getSeriesData: async function() {\n                const chartsAPI = Axios.create(configureApi(this.apiUrl));\n                let params = {\n                    'start': this.displayStart,\n                    'end': this.displayEnd,\n                    'pageUrl': this.pageUrl,\n                    'siteId': this.siteId,\n                };\n                await queryApi(chartsAPI, '', params, (data) => {\n                    if (data[0] !== undefined) {\n                        let largest1 = largestNumber([data[0]['data']])[0];\n                        let largest2 = largestNumber([data[1]['data']])[0];\n                        let largest = largest1 > largest2 ? largest1 : largest2;\n                        this.chartOptions = {\n                            ...this.chartOptions, ...{\n                                yaxis: {\n                                    min: 0,\n                                    max: largest,\n                                    tickAmount: largest > 10 ? 10 : largest,\n                                    labels: {\n                                        formatter: (val) => {\n                                            return Math.round(val);\n                                        },\n                                    },\n                                },\n                                xaxis: {\n                                    categories: data[0]['labels'],\n                                    type: 'category',\n                                    labels: {\n                                        show: false,\n                                        minHeight: '20px',\n                                    },\n                                    crosshairs: {\n                                        width: 1\n                                    },\n                                },\n                                labels: data[0]['labels']\n                            }\n                        };\n                        this.series = data;\n                    }\n                });\n            },\n            onChangeRange (range) {\n                this.displayStart = range.start;\n                this.displayEnd = range.end;\n                this.getSeriesData();\n            },\n        },\n        created () {\n            this.getSeriesData();\n        },\n        mounted() {\n            this.$events.$on('change-range', eventData => this.onChangeRange(eventData));\n        },\n        data: function() {\n            return {\n                chartOptions: {\n                    chart: {\n                        id: 'vuechart-pages-detail',\n                        toolbar: {\n                            show: false,\n                        },\n                        sparkline: {\n                            enabled: false\n                        },\n                        animations: {\n                            enabled: false,\n                        },\n                    },\n                    tooltip: {\n                        enabled: true,\n                        inverseOrder: true,\n                        x: {\n                            show: false,\n                        },\n                    },\n                    colors: [\n                        '#1F9D55',\n                        '#CC1F1A',\n                    ],\n                    stroke: {\n                        curve: 'smooth',\n                        width: 3,\n                    },\n                    fill: {\n                        type: 'solid',\n                        opacity: 0.5,\n                        gradient: {\n                            enabled: false,\n                        },\n                    },\n                    legend: {\n                        formatter: undefined,\n                        offsetX: 0,\n                        offsetY: -10,\n                    },\n                    xaxis: {\n                        labels: {\n                            show: false,\n                            minHeight: '20px',\n                        },\n                        crosshairs: {\n                            width: 1\n                        },\n                    },\n                    yaxis: {\n                        min: 0,\n                        max: 0,\n                        seriesName: 'Errors',\n                        tickAmount: 1,\n                        labels: {\n                            formatter: (val) => {\n                                return Math.round(val);\n                            },\n                        },\n                    },\n                    labels: [],\n                    title: {\n                        text: this.title,\n                        offsetX: 0,\n                        style: {\n                            fontSize: '24px',\n                            cssClass: 'apexcharts-yaxis-title'\n                        }\n                    },\n                },\n                series: [\n                    {\n                        name: 'empty',\n                        data: [0]\n                    }\n                ],\n                displayStart: this.start,\n                displayEnd: this.end,\n                displayMaxValue: this.maxValue,\n            }\n        },\n    }\n</script>\n"],"names":[],"mappings":"+dAAA,GAAI,GAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAQ,OAAO,OAAS,QAAQ,KAAO,OAAO,QAAU,EAAI,aAAa,OAAS,EAAI,WAC1M,EAAkB,GCQtB"}