{"version":3,"file":"PerformanceDetailAreaChart-558NUFam.js","sources":["../../../../../buildchain/src/vue/charts/performance/PerformanceDetailAreaChart.vue"],"sourcesContent":["<template>\n  <apexcharts\n    :options=\"chartOptions\"\n    :series=\"series\"\n    height=\"450px\"\n    type=\"area\"\n    width=\"100%\"\n  />\n</template>\n\n<script>\nimport Axios from 'axios';\nimport ApexCharts from 'vue-apexcharts';\n\n// Get the largest number from the passed in arrays\nconst largestNumber = (mainArray) => {\n  return mainArray.map(function (subArray) {\n    return Math.max.apply(null, subArray);\n  });\n};\n\n// Configure the api endpoint\nconst configureApi = (url) => {\n  return {\n    baseURL: url,\n    headers: {\n      'X-Requested-With': 'XMLHttpRequest'\n    }\n  };\n};\n// Query our API endpoint via an XHR GET\nconst queryApi = (api, uri, params, callback) => {\n  api.get(uri, {params: params})\n    .then((result) => {\n      if (callback) {\n        callback(result.data);\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n};\n\n// Our component exports\nexport default {\n  components: {\n    'apexcharts': ApexCharts,\n  },\n  props: {\n    title: {\n      type: String,\n      default: '',\n    },\n    start: {\n      type: String,\n      default: '',\n    },\n    end: {\n      type: String,\n      default: '',\n    },\n    pageUrl: {\n      type: String,\n      default: '',\n    },\n    siteId: {\n      type: Number,\n      default: 0,\n    },\n    apiUrl: {\n      type: String,\n      default: '',\n    },\n  },\n  data: function () {\n    return {\n      chartOptions: {\n        chart: {\n          id: 'vuechart-pages-detail',\n          toolbar: {\n            show: false,\n          },\n          sparkline: {\n            enabled: false\n          },\n          animations: {\n            enabled: false,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        tooltip: {\n          enabled: true,\n          inverseOrder: true,\n          x: {\n            show: false,\n          },\n        },\n        colors: [\n          '#CC1F1A', '#E3342F', '#EF5753',\n          '#DE751F', '#F6993F', '#FAAD63',\n          '#2779BD', '#3490DC', '#6CB2EB', '#BCDEFA',\n        ],\n        stroke: {\n          curve: 'smooth',\n          width: 3,\n        },\n        fill: {\n          type: 'solid',\n          opacity: 0.9,\n          gradient: {\n            enabled: false,\n          },\n        },\n        legend: {\n          formatter: undefined,\n          offsetX: 0,\n          offsetY: -10,\n        },\n        xaxis: {\n          type: 'category',\n          labels: {\n            show: false,\n            minHeight: '20px',\n          },\n          crosshairs: {\n            width: 1\n          },\n        },\n        yaxis: {\n          min: 0,\n          max: 0,\n          seriesName: 'Time',\n          labels: {\n            formatter: (val) => {\n              return this.statFormatter(val);\n            },\n          },\n        },\n        labels: [],\n        title: {\n          text: this.title,\n          offsetX: 0,\n          style: {\n            fontSize: '24px',\n            cssClass: 'apexcharts-yaxis-title'\n          }\n        },\n      },\n      series: [\n        {\n          name: 'empty',\n          data: [0]\n        }\n      ],\n      displayStart: this.start,\n      displayEnd: this.end,\n      displayMaxValue: this.maxValue,\n    }\n  },\n  created() {\n    this.getSeriesData();\n  },\n  mounted() {\n    this.$events.$on('change-range', eventData => this.onChangeRange(eventData));\n  },\n  methods: {\n    // Load in our chart data asynchronously\n    getSeriesData: async function () {\n      const chartsAPI = Axios.create(configureApi(this.apiUrl));\n      let params = {\n        'start': this.displayStart,\n        'end': this.displayEnd,\n        'pageUrl': this.pageUrl,\n        'siteId': this.siteId,\n      };\n      await queryApi(chartsAPI, '', params, (data) => {\n        if (data[0] !== undefined) {\n          let largest = largestNumber([data[9]['data']])[0];\n          largest = Math.ceil((largest / 1000)) * 1000;\n          this.chartOptions = {\n            ...this.chartOptions, ...{\n              yaxis: {\n                min: 0,\n                max: largest,\n                labels: {\n                  formatter: (val) => {\n                    return this.statFormatter(val);\n                  },\n                },\n              },\n              xaxis: {\n                categories: data[0]['labels'],\n                type: 'category',\n                labels: {\n                  show: false,\n                  minHeight: '20px',\n                },\n                crosshairs: {\n                  width: 1\n                },\n              },\n              labels: data[0]['labels']\n            }\n          };\n          this.series = data;\n        }\n      });\n    },\n    onChangeRange(range) {\n      this.displayStart = range.start;\n      this.displayEnd = range.end;\n      this.getSeriesData();\n    },\n    statFormatter(val) {\n      return Number(val / 1000).toFixed(2) + \"s\";\n    },\n  },\n}\n</script>\n"],"names":["largestNumber","mainArray","subArray","configureApi","url","queryApi","api","uri","params","callback","result","error","_sfc_main","ApexCharts","val","eventData","chartsAPI","Axios","data","largest","range"],"mappings":"+DAeA,MAAAA,EAAAC,GACAA,EAAA,IAAA,SAAAC,EAAA,CACA,OAAA,KAAA,IAAA,MAAA,KAAAA,CAAA,CACA,CAAA,EAIAC,EAAAC,IACA,CACA,QAAAA,EACA,QAAA,CACA,mBAAA,gBACA,CACA,GAGAC,EAAA,CAAAC,EAAAC,EAAAC,EAAAC,IAAA,CACAH,EAAA,IAAAC,EAAA,CAAA,OAAAC,CAAA,CAAA,EACA,KAAAE,GAAA,CACAD,GACAA,EAAAC,EAAA,IAAA,CAEA,CAAA,EACA,MAAAC,GAAA,CACA,QAAA,IAAAA,CAAA,CACA,CAAA,CACA,EAGAC,EAAA,CACA,WAAA,CACA,WAAAC,CACA,EACA,MAAA,CACA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EACA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EACA,IAAA,CACA,KAAA,OACA,QAAA,EACA,EACA,QAAA,CACA,KAAA,OACA,QAAA,EACA,EACA,OAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,OAAA,CACA,KAAA,OACA,QAAA,EACA,CACA,EACA,KAAA,UAAA,CACA,MAAA,CACA,aAAA,CACA,MAAA,CACA,GAAA,wBACA,QAAA,CACA,KAAA,EACA,EACA,UAAA,CACA,QAAA,EACA,EACA,WAAA,CACA,QAAA,EACA,CACA,EACA,WAAA,CACA,QAAA,EACA,EACA,QAAA,CACA,QAAA,GACA,aAAA,GACA,EAAA,CACA,KAAA,EACA,CACA,EACA,OAAA,CACA,UAAA,UAAA,UACA,UAAA,UAAA,UACA,UAAA,UAAA,UAAA,SACA,EACA,OAAA,CACA,MAAA,SACA,MAAA,CACA,EACA,KAAA,CACA,KAAA,QACA,QAAA,GACA,SAAA,CACA,QAAA,EACA,CACA,EACA,OAAA,CACA,UAAA,OACA,QAAA,EACA,QAAA,GACA,EACA,MAAA,CACA,KAAA,WACA,OAAA,CACA,KAAA,GACA,UAAA,MACA,EACA,WAAA,CACA,MAAA,CACA,CACA,EACA,MAAA,CACA,IAAA,EACA,IAAA,EACA,WAAA,OACA,OAAA,CACA,UAAAC,GACA,KAAA,cAAAA,CAAA,CAEA,CACA,EACA,OAAA,CAAA,EACA,MAAA,CACA,KAAA,KAAA,MACA,QAAA,EACA,MAAA,CACA,SAAA,OACA,SAAA,wBACA,CACA,CACA,EACA,OAAA,CACA,CACA,KAAA,QACA,KAAA,CAAA,CAAA,CACA,CACA,EACA,aAAA,KAAA,MACA,WAAA,KAAA,IACA,gBAAA,KAAA,QACA,CACA,EACA,SAAA,CACA,KAAA,cAAA,CACA,EACA,SAAA,CACA,KAAA,QAAA,IAAA,eAAAC,GAAA,KAAA,cAAAA,CAAA,CAAA,CACA,EACA,QAAA,CAEA,cAAA,gBAAA,CACA,MAAAC,EAAAC,EAAA,OAAAd,EAAA,KAAA,MAAA,CAAA,EACA,IAAAK,EAAA,CACA,MAAA,KAAA,aACA,IAAA,KAAA,WACA,QAAA,KAAA,QACA,OAAA,KAAA,MACA,EACA,MAAAH,EAAAW,EAAA,GAAAR,EAAAU,GAAA,CACA,GAAAA,EAAA,CAAA,IAAA,OAAA,CACA,IAAAC,EAAAnB,EAAA,CAAAkB,EAAA,CAAA,EAAA,IAAA,CAAA,EAAA,CAAA,EACAC,EAAA,KAAA,KAAAA,EAAA,GAAA,EAAA,IACA,KAAA,aAAA,CACA,GAAA,KAAA,aACA,MAAA,CACA,IAAA,EACA,IAAAA,EACA,OAAA,CACA,UAAAL,GACA,KAAA,cAAAA,CAAA,CAEA,CACA,EACA,MAAA,CACA,WAAAI,EAAA,CAAA,EAAA,OACA,KAAA,WACA,OAAA,CACA,KAAA,GACA,UAAA,MACA,EACA,WAAA,CACA,MAAA,CACA,CACA,EACA,OAAAA,EAAA,CAAA,EAAA,MAEA,EACA,KAAA,OAAAA,CACA,CACA,CAAA,CACA,EACA,cAAAE,EAAA,CACA,KAAA,aAAAA,EAAA,MACA,KAAA,WAAAA,EAAA,IACA,KAAA,cAAA,CACA,EACA,cAAAN,EAAA,CACA,OAAA,OAAAA,EAAA,GAAA,EAAA,QAAA,CAAA,EAAA,GACA,CACA,CACA"}