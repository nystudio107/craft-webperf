{"version":3,"file":"RequestBarChart.ca2f7fb8.js","sources":["../../../../../buildchain/src/vue/charts/common/RequestBarRecursive.vue?vue&type=template&lang.js","../../../../../buildchain/src/vue/charts/common/RequestBarRecursive.vue","../../../../../buildchain/src/vue/charts/common/RequestBarChart.vue?vue&type=template&lang.js","../../../../../buildchain/src/vue/charts/common/RequestBarChart.vue"],"sourcesContent":["\n<div class=\"h-5\"\n     :class=\"color\"\n     :style=\"{width: ((value / parentValue) * 100) + '%'}\"\n     :title=\"label + ' ' + statFormatter(value)\"\n>\n    <request-bar-recursive\n            v-for=\"node in nodes\"\n            :key=\"node.column\"\n            :column=\"node.column\"\n            :color=\"node.color\"\n            :label=\"node.label\"\n            :value=\"node.value\"\n            :parentValue=\"node.parentValue\"\n            :nodes=\"node.nodes\"\n    >\n    </request-bar-recursive>\n</div>\n","<template>\n    <div class=\"h-5\"\n         :class=\"color\"\n         :style=\"{width: ((value / parentValue) * 100) + '%'}\"\n         :title=\"label + ' ' + statFormatter(value)\"\n    >\n        <request-bar-recursive\n                v-for=\"node in nodes\"\n                :key=\"node.column\"\n                :column=\"node.column\"\n                :color=\"node.color\"\n                :label=\"node.label\"\n                :value=\"node.value\"\n                :parentValue=\"node.parentValue\"\n                :nodes=\"node.nodes\"\n        >\n        </request-bar-recursive>\n    </div>\n</template>\n<script>\n    export default {\n        name: 'request-bar-recursive',\n        props: {\n            column: String,\n            color: String,\n            label: String,\n            value: Number,\n            parentValue: Number,\n            nodes: Array,\n        },\n        methods: {\n            statFormatter(val) {\n                return Number(val / 1000).toFixed(2) + \"s\";\n            },\n        },\n    }\n</script>\n","\n<div class=\"flex flex-no-wrap\">\n    <div class=\"flex-shrink\" v-if=\"rowData.type === 'both'\" title=\"Combined Frontend & Craft Beacon\">\n        <div class=\"w-2 h-2 bg-blue-700 rounded-full mb-1\">\n        </div>\n        <div class=\"w-2 h-2 bg-orange-700 rounded-full\">\n        </div>\n    </div>\n    <div class=\"flex-shrink\" v-if=\"rowData.type === 'frontend'\" title=\"Frontend Beacon only\">\n        <div class=\"w-2 h-2 bg-blue-700 rounded-full mb-1\">\n        </div>\n        <div class=\"w-2 h-2 bg-transparent rounded-full\">\n        </div>\n    </div>\n    <div class=\"flex-shrink\" v-if=\"rowData.type === 'craft'\" title=\"Craft Beacon only\">\n        <div class=\"w-2 h-2 bg-transparent rounded-full mb-1\">\n        </div>\n        <div class=\"w-2 h-2 bg-orange-700 rounded-full\">\n        </div>\n    </div>\n    <div class=\"flex-grow\">\n    <request-bar-recursive :column=\"root.column\"\n                           :color=\"root.color\"\n                           :label=\"root.label\"\n                           :value=\"root.value\"\n                           :parentValue=\"root.parentValue\"\n                           :nodes=\"root.nodes\"\n    >\n    </request-bar-recursive>\n    </div>\n    <div class=\"flex-shrink\">\n        {{ statFormatter(root.value) }}\n    </div>\n</div>\n","<template>\n    <div class=\"flex flex-no-wrap\">\n        <div class=\"flex-shrink\" v-if=\"rowData.type === 'both'\" title=\"Combined Frontend & Craft Beacon\">\n            <div class=\"w-2 h-2 bg-blue-700 rounded-full mb-1\">\n            </div>\n            <div class=\"w-2 h-2 bg-orange-700 rounded-full\">\n            </div>\n        </div>\n        <div class=\"flex-shrink\" v-if=\"rowData.type === 'frontend'\" title=\"Frontend Beacon only\">\n            <div class=\"w-2 h-2 bg-blue-700 rounded-full mb-1\">\n            </div>\n            <div class=\"w-2 h-2 bg-transparent rounded-full\">\n            </div>\n        </div>\n        <div class=\"flex-shrink\" v-if=\"rowData.type === 'craft'\" title=\"Craft Beacon only\">\n            <div class=\"w-2 h-2 bg-transparent rounded-full mb-1\">\n            </div>\n            <div class=\"w-2 h-2 bg-orange-700 rounded-full\">\n            </div>\n        </div>\n        <div class=\"flex-grow\">\n        <request-bar-recursive :column=\"root.column\"\n                               :color=\"root.color\"\n                               :label=\"root.label\"\n                               :value=\"root.value\"\n                               :parentValue=\"root.parentValue\"\n                               :nodes=\"root.nodes\"\n        >\n        </request-bar-recursive>\n        </div>\n        <div class=\"flex-shrink\">\n            {{ statFormatter(root.value) }}\n        </div>\n    </div>\n</template>\n<script>\n    import RequestBarRecursive from '@/vue/charts/common/RequestBarRecursive.vue';\n\n    const requestBarGraphFields = [\n        {\n            column: 'pageLoad',\n            color: 'bg-blue-200',\n            label: 'Page Loaded',\n        },\n        {\n            column: 'domInteractive',\n            color: 'bg-blue-400',\n            label: 'DOM Interactive',\n        },\n        {\n            column: 'firstContentfulPaint',\n            color: 'bg-blue-500',\n            label: 'First Contentful Paint',\n        },\n        {\n            column: 'firstPaint',\n            color: 'bg-blue-700',\n            label: 'First Paint',\n        },\n        {\n            column: 'firstByte',\n            color: 'bg-orange-400',\n            label: 'First Byte',\n        },\n        {\n            column: 'connect',\n            color: 'bg-orange-500',\n            label: 'Connect',\n        },\n        {\n            column: 'dns',\n            color: 'bg-orange-700',\n            label: 'DNS Lookup',\n        },\n        {\n            column: 'craftTotalMs',\n            color: 'bg-red-400',\n            label: 'Craft Rendering',\n        },\n        {\n            column: 'craftTwigMs',\n            color: 'bg-red-500',\n            label: 'Twig Rendering',\n        },\n        {\n            column: 'craftDbMs',\n            color: 'bg-red-700',\n            label: 'Database Queries',\n        },\n    ];\n\n    export default {\n        name: 'request-bar-chart',\n        components: {\n            'request-bar-recursive': RequestBarRecursive,\n        },\n        props: {\n            rowData: Object,\n        },\n        data: function() {\n            return {\n                root: undefined,\n            }\n        },\n        mounted() {\n            if (this.$events !== undefined) {\n                this.$events.$on('refresh-table-components', eventData => this.onTableRefresh(eventData));\n            }\n        },\n        created() {\n            this.calculateNodes();\n        },\n        methods: {\n            onTableRefresh: function (eventData) {\n                this.calculateNodes();\n            },\n            statFormatter(val) {\n                return Number(val / 1000).toFixed(2) + \"s\";\n            },\n            calculateNodes: function() {\n                this.root = undefined;\n                requestBarGraphFields.forEach((element) => {\n                    let node = {\n                        column: element.column,\n                        color: element.color,\n                        label: element.label,\n                        value: parseFloat(this.rowData[element.column]) || null,\n                        parentValue: parseFloat(this.rowData['maxTotalPageLoad']) || null,\n                        nodes: undefined,\n                    };\n                    if (node.value) {\n                        if (this.root) {\n                            let searchNode = this.root;\n                            while (searchNode) {\n                                if (!searchNode.nodes || (!searchNode.value) || (node.value > searchNode.value)) {\n                                    node.nodes = searchNode.nodes;\n                                    node.parentValue = searchNode.parentValue || searchNode.value;\n                                    searchNode.nodes = [node];\n                                    searchNode = node.nodes || undefined;\n                                } else {\n                                    searchNode = searchNode.nodes[0] || undefined;\n                                }\n                            }\n                        } else {\n                            this.root = node;\n                        }\n                    }\n                });\n            }\n        },\n    }\n</script>\n"],"names":["render","staticRenderFns"],"mappings":"yCAAA,GAAIA,GAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,MAAM,CAAC,YAAY,MAAM,MAAM,EAAI,MAAM,MAAO,CAAC,MAAS,EAAI,MAAQ,EAAI,YAAe,IAAO,KAAM,MAAM,CAAC,MAAQ,EAAI,MAAQ,IAAM,EAAI,cAAc,EAAI,SAAS,EAAI,GAAI,EAAI,MAAO,SAAS,EAAK,CAAC,MAAO,GAAG,wBAAwB,CAAC,IAAI,EAAK,OAAO,MAAM,CAAC,OAAS,EAAK,OAAO,MAAQ,EAAK,MAAM,MAAQ,EAAK,MAAM,MAAQ,EAAK,MAAM,YAAc,EAAK,YAAY,MAAQ,EAAK,WAAW,IACteC,EAAkB,GCmBtB,0TCpBI,EAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,MAAM,CAAC,YAAY,qBAAqB,CAAE,EAAI,QAAQ,OAAS,OAAQ,EAAG,MAAM,CAAC,YAAY,cAAc,MAAM,CAAC,MAAQ,qCAAqC,CAAC,EAAG,MAAM,CAAC,YAAY,0CAA0C,EAAG,MAAM,CAAC,YAAY,yCAAyC,EAAI,KAAM,EAAI,QAAQ,OAAS,WAAY,EAAG,MAAM,CAAC,YAAY,cAAc,MAAM,CAAC,MAAQ,yBAAyB,CAAC,EAAG,MAAM,CAAC,YAAY,0CAA0C,EAAG,MAAM,CAAC,YAAY,0CAA0C,EAAI,KAAM,EAAI,QAAQ,OAAS,QAAS,EAAG,MAAM,CAAC,YAAY,cAAc,MAAM,CAAC,MAAQ,sBAAsB,CAAC,EAAG,MAAM,CAAC,YAAY,6CAA6C,EAAG,MAAM,CAAC,YAAY,yCAAyC,EAAI,KAAK,EAAG,MAAM,CAAC,YAAY,aAAa,CAAC,EAAG,wBAAwB,CAAC,MAAM,CAAC,OAAS,EAAI,KAAK,OAAO,MAAQ,EAAI,KAAK,MAAM,MAAQ,EAAI,KAAK,MAAM,MAAQ,EAAI,KAAK,MAAM,YAAc,EAAI,KAAK,YAAY,MAAQ,EAAI,KAAK,UAAU,GAAG,EAAG,MAAM,CAAC,YAAY,eAAe,CAAC,EAAI,GAAG,IAAI,EAAI,GAAG,EAAI,cAAc,EAAI,KAAK,QAAQ,UACprC,EAAkB,GCqCtB"}